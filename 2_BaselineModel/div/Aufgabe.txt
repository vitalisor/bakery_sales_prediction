import os
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Datei-Pfade
file_paths = {
    "holstein_kiel": "./holstein kiel.csv",
    "kiwo": "./kiwo.csv",
    "umsatzdaten": "./umsatzdaten_gekuerzt.csv",
    "wetter": "./wetter.csv"
}

# Dateien laden
dfs = {}
for name, path in file_paths.items():
    if not os.path.exists(path):
        raise FileNotFoundError(f"Datei {path} nicht gefunden.")
    dfs[name] = pd.read_csv(path)

# Holstein Kiel bereinigen
holstein_kiel = (dfs["holstein_kiel"]["Datum;Heimspiel;;;"]
                 .str.split(";", expand=True).iloc[:, :2])
holstein_kiel.columns = ["Datum", "Heimspiel"]
holstein_kiel["Datum"] = pd.to_datetime(holstein_kiel["Datum"], format="%d.%m.%Y", errors="coerce")
holstein_kiel["Heimspiel"] = holstein_kiel["Heimspiel"].astype(float)

# Umsatzdaten bereinigen
umsatzdaten = dfs["umsatzdaten"]
umsatzdaten["Datum"] = pd.to_datetime(umsatzdaten["Datum"], errors="coerce")

# Wetter- und Kieler-Woche-Daten
for key in ["wetter", "kiwo"]:
    dfs[key]["Datum"] = pd.to_datetime(dfs[key]["Datum"], errors="coerce")

# Daten kombinieren
combined_data = pd.merge(umsatzdaten, dfs["wetter"], on="Datum", how="left")
combined_data = pd.merge(combined_data, dfs["kiwo"], on="Datum", how="left")
combined_data = pd.merge(combined_data, holstein_kiel, on="Datum", how="left").fillna(0)

# Sicherstellen, dass die Spalte "Warengruppe" vorhanden ist
if "Warengruppe" not in combined_data.columns:
    raise ValueError("Die Spalte 'Warengruppe' fehlt in den kombinierten Daten.")

# Trainings- und ValidierungsdatensÃ¤tze
train_data = combined_data[(combined_data["Datum"] >= "2013-07-01") & (combined_data["Datum"] <= "2017-07-31")]
test_data = combined_data[(combined_data["Datum"] >= "2017-08-01") & (combined_data["Datum"] <= "2018-07-31")]

# Modellierung
result_list = []
for group in combined_data["Warengruppe"].unique():
    train_group = train_data[train_data["Warengruppe"] == group]
    test_group = test_data[test_data["Warengruppe"] == group]
    if train_group.empty or test_group.empty:
        continue
    X_train, y_train = train_group.drop(columns=["Umsatz", "Datum", "Warengruppe"]), train_group["Umsatz"]
    X_test, y_test = test_group.drop(columns=["Umsatz", "Datum", "Warengruppe"]), test_group["Umsatz"]
    model = LinearRegression().fit(X_train, y_train)
    y_pred = model.predict(X_test)
    result_list.extend([{
        "id": f"{row.Datum.year}{row.Datum.month:02d}{row.Datum.day:02d}{group}",
        "datum": row.Datum,
        "warengruppe": group,
        "umsatz": pred
    } for row, pred in zip(test_group.itertuples(index=False), y_pred)])
    print(f"Warengruppe: {group}\nMSE: {mean_squared_error(y_test, y_pred):.2f}\nRÂ²: {r2_score(y_test, y_pred):.2f}")

# Ergebnisse speichern
result_df = pd.DataFrame(result_list)
output_path = "./vorhersage_ergebnisse.csv"
result_df.to_csv(output_path, index=False)

print(f"Ergebnisse erfolgreich gespeichert. Insgesamt {len(result_df)} Zeilen.")
